<apex:page showHeader="false" sidebar="false" standardController="order" extensions="SDO_Catalog">
    <script type="text/javascript">
    var __sfdcSessionId = '{!GETSESSIONID()}';
    </script>
    <apex:stylesheet value="{!URLFOR($Resource.BfBootstrap, 'bootstrap-3.3.2-dist/css/bootstrap.min.css')}"/>
    <style>
        *{
        margin:0px;
        }
        html *
        {
        /*font-family:Arial,Helvetica,sans-serif !important;*/
        
        }
        .my-font{
        font-family:'Helvetica Neue',Helvetica,Arial,sans-serif !important;
        }
        html,body{
        height:100%;
        }
        .shoppingCart{
        min-height: 100%;
        /* equal to footer height */
        margin-bottom: -38px; 
        }
        .shoppingCart:after {
        content: "";
        display: block;
        }
        
        .shopping-cart-item{
        }
        .line-image{
        height:50px;
        }
        .shopping-cart-item a{
        position: relative;
        font-size: 12px;
        top: 17px;
        white-space: nowrap;
        }
        .price{
        float: right;
        position: relative;
        font-size: 12px;
        top: 17px;
        white-space: nowrap;
        }
        .line-qty{
        width:40px;
        display:inline;
        position: relative;
        font-size: 12px;
        top: 14px;
        }
        .glyphicon-remove {
        margin-left:10px;
        cursor:pointer;
        position: relative;
        font-size: 12px;
        top: 19px;
        }
        .table{
        width:100%;
        }
        td{
        border-top:0px !important;
        }
        .product-item h3 a {
        text-transform: none;
        }
        .shopping-cart-footer,.shoppingCart:after{
        height: 38px;
        
        }
        .shopping-cart-footer{
        position: fixed;
        bottom: 0;
        background: white;
        width: 100%;
        }
        
        .total-wrapper {
        font-weight:bold;
        margin-top: 12px;
        white-space: nowrap;
        }
        .green-btn{
        font-size: 15px;
        border-radius: 5px !important;
        padding: 7px 6px;
        background: #87ae2e;
        border-color: #87ae2e;
        color: white;
        position: relative;
        top:10px;
        left: 10px;
        cursor:pointer;
        }
    </style>
    <div class="shoppingCart">
        
    </div>
    
    <div class="row shopping-cart-footer">
        <div class="col-xs-6">
            <span onclick="openSubtab2('/apex/SDO_CatalogCheckout2?id={!Order.id}','Order Checkout');" class="green-btn">Checkout</span>
        </div>
        <div class="total-wrapper col-xs-6">
            <span style="float:right;">Total: $<span class="total"></span></span>
        </div>
    </div>
    
    
    <script src="../../soap/ajax/39.0/connection.js" type="text/javascript">
    </script>
    <apex:includeScript value="/support/console/38.0/integration.js"/>
    <apex:includeScript value="{!URLFOR($Resource.CatalogResources, '/js/jquery.min.js')}"/>
    <script>
    
    sforce.connection.sessionId = __sfdcSessionId;
    
    var result;
    var records;
    var listener = function (result) {
        console.log('Message received from events: ' + result.message);
        var segments = result.message.split(':');
        var pricebookEntryId = result.message.split(':')[0];
        var quantity = result.message.split(':')[1];
        
        var resVal = sforce.connection.query("select product2Id,product2.Image_URL__c,product2.Family,product2.id,product2.ProductCode,product2.attribute_1__c,product2.attribute_2__c,product2.attribute_3__c,product2.attribute_4__c,product2.attribute_5__c, pricebook2id,id, name, unitprice,UseStandardPrice from PricebookEntry where id = \'" + pricebookEntryId + '\' limit 1' );
        console.log('WAHOO');
        console.log('result', resVal.records);
        records = resVal.getArray("records");
        console.log(records);
        var pricebookEntry = resVal.records;
        console.log('pbEntry', pricebookEntry);
        
        /*
             var productLine = '<div class="shopping-cart-item">';
             productLine += '<img class="line-image" src="/servlet/servlet.FileDownload?file='+records[0].Product2.Image_URL__c+'"/>';
             productLine += '<a href="#" onclick="openSubtab(\''+records[0].Id+'\',\''+records[0].Name+'\')">records[0].Name</a>';
             productLine += '$'+records[0].UnitPrice;
             productLine += '<input class="qty-'+records[0].id+'" type="text" placeholder="Qty"/>';
             productLine += '</div>';
             $('.shoppingCart').append(productLine);
             */
        
        //check to see if the pricebook entry id alrady exists as an order 
        console.log('ORDER ID','{!order.Id}');
        var result2 = sforce.connection.query('select id,unitprice,quantity,PricebookEntryId,PricebookEntry.Product2.name,PricebookEntry.Product2.id,PricebookEntry.product2.Image_URL__c from orderitem where orderid = \'{!order.id}\''); 
        console.log('result2', result2);
        orderProductList = result2.getArray("records");
        var duplicateEntry = false;
        var duplicateOrderId = '';
        if(orderProductList && orderProductList.length > 0) {
            for(var i =0;i<orderProductList.length;i++){
                                    console.log('1');
                if(orderProductList[i].PricebookEntryId == pricebookEntryId){
                    console.log('2');
                    //alert('duplicate detected');
                    //duplicate detected, update the existing order instead of creating a new one
                    duplicateEntry = true;
                    duplicateOrderId = orderProductList[i].Id;
                }
            }
        }
        if(orderProductList.length == 0) {
                                console.log('3');
            //check to see if the order has a pricebook, if not, update the order to use the standard pricebook
            var order = sforce.connection.query('select id,pricebook2id from order where id = \'{!order.id}\' limit 1').getArray("records")[0];
            console.log('order after 3',order);
            if (order.Pricebook2Id == null || order.Pricebook2Id == '') {
                console.log('getting closer');
                
                //OLD CODE: var standardPricebook = sforce.connection.query('select id,name from pricebook2 where name = \'Northern Trails*\' limit 1');
                //console.log(standardPricebook);
                //order.Pricebook2Id = standardPricebook.getArray("records")[0].Id;
                //order.Pricebook2Id = '01s2E000001iQZNAAY';
                
                //NEW CODE: 
                var standardPricebook = sforce.connection.query('select id,name from pricebook2 where name = \'Northern Trails\' limit 1');
                console.log('This is the standard pricebook: ' + standardPricebook);
                order.Pricebook2Id = standardPricebook.getArray("records")[0].Id;
                //order.Pricebook2Id = '01s2E000001iQZSAAY';
                
                var result5 = sforce.connection.update([order]);
                console.log('updating order pricebook to standard');
                console.log(result5);
            }
        }
        if(duplicateEntry && duplicateOrderId != ''){
                                console.log('4');
            var result3 = sforce.connection.query('select id,unitprice,quantity from orderitem where id = \''+duplicateOrderId+'\' limit 1');
            orderItem = result3.getArray("records")[0];
            console.log('quantity before: ');
            console.log(orderItem.Quantity);
            orderItem.Quantity = parseInt(orderItem.Quantity) + 1;
            console.log('quantity after: ');
            console.log(orderItem.Quantity);
            var result4 = sforce.connection.update([orderItem]);
            console.log(result4);
            displayList();
        }else {
            console.log('in the else');
            var orderProduct = new sforce.SObject("OrderItem"); 
            orderProduct.OrderId = '{!order.id}';
            orderProduct.PricebookEntryId =  pricebookEntry.Id;
            orderProduct.UnitPrice = pricebookEntry.UnitPrice;  
            orderProduct.Quantity = quantity;
            console.log('orderProduct', orderProduct);
            var resultProduct = sforce.connection.create([orderProduct]);
            console.log('inserting new order product...result:');
            console.log(resultProduct);
            displayList();
        }
    };
    //Add a listener for the 'SampleEvent' event type
    sforce.console.addEventListener('AddProductToShoppingCart', listener);
    
    function displayList() {
        console.log('into Display List');
        var result2 = sforce.connection.query('select id,unitprice,quantity,PricebookEntryId,PricebookEntry.Product2.name,PricebookEntry.Product2.id,PricebookEntry.product2.Image_URL__c from orderitem where orderid = \'{!order.id}\''); 
        orderProductList = result2.getArray("records");
        console.log('orderProductList', orderProductList);
        $('.shoppingCart').html('');
        var tableString = '<table class="shopping-cart-item table">';
        var total = 0;
        for(var i =0;i<orderProductList.length;i++){
            tableString += addShoppingCartItem(orderProductList[i]);
            var price = parseInt(orderProductList[i].UnitPrice);
            var qty = parseInt(orderProductList[i].Quantity);
            total += qty*price;
        }
        tableString += '</table>';
        $('.total').html(total);
        $('.total').append('.00');
        $('.shoppingCart').append(tableString);
        sforce.console.fireEvent('OrderTotalUpdated', total, callback);
    }
    
    var callback = function(result) { 
        if (result.success) { 
            console.log('The custom event: OrderTotalUpdated, fired!');
        } else { 
            console.log('The custom event: OrderTotalUpdated, could not be fired!');
        } 
    };
    
    function addShoppingCartItem(orderProductItem) {
        var productName;
        if(orderProductItem.PricebookEntry.Product2.Name.length > 15) {
            productName = orderProductItem.PricebookEntry.Product2.Name.substring(0, 15) + '...';
        }else {
            productName = orderProductItem.PricebookEntry.Product2.Name; 
        }
        
        var productLine = '<tr>';
        productLine += '<td>';
        productLine +=  '<img class="line-image" src="'+orderProductItem.PricebookEntry.Product2.Image_URL__c+'"/>';
        productLine += '</td>';
        productLine += '<td >';
        productLine +=  '<a class="my-font" href="#" onclick="openSubtab(\''+orderProductItem.PricebookEntryId+'\',\''+orderProductItem.PricebookEntry.Product2.Name+'\')">'+productName+'</a>';
        productLine += '</td>';
        productLine += '<td style="padding-right: 10px;">';

        var temp = orderProductItem.UnitPrice.split('.');
        temp = temp[1];
        
        if(temp.length > 1){
            productLine +=  '<span class="price">$'+orderProductItem.UnitPrice+'</span>';
        } else {
            productLine +=  '<span class="price">$'+orderProductItem.UnitPrice+'0</span>';
        }
        
        productLine += '</td>';
        productLine += '<td >';
        productLine +=  '<input onchange="updateQuantity(\''+orderProductItem.Id+'\');" class="line-qty qty-'+orderProductItem.Id+'" type="text" placeholder="Qty" value="'+orderProductItem.Quantity.split('.')[0]+'"/>';
        productLine += '</td>';
        productLine += '<td>';
        productLine +=  '<span class="glyphicon glyphicon-remove" onclick="removeOrderItem(\''+orderProductItem.Id+'\');" aria-hidden="true"></span>';
        productLine += '</td>';
        productLine += '</tr>';
        return productLine;
        //$('.shoppingCart').append(productLine);
    }
    
    function updateQuantity(orderItemId){
        var qty = $('.qty-'+orderItemId).val();
        console.log(qty);
        var result2 = sforce.connection.query('select id,unitprice,quantity from orderitem where id = \''+orderItemId+'\' limit 1'); 
        orderItem = result2.getArray("records")[0];
        orderItem.Quantity = parseInt(qty);
        var result3 = sforce.connection.update([orderItem]);
        console.log(result3);
        displayList();
    }
    
    var url;
    var tabName;
    var callOpenSubtab=function callOpenSubtab(result) {
        console.log(result.id);
        sforce.console.openSubtab(result.id, 
                                  '/apex/sdo_productpage?id='+url, true, tabName);
    };
    
    function removeOrderItem(orderItemId) {
        console.log(orderItemId);
        var arr = [orderItemId];
        sforce.connection.deleteIds(arr);
        displayList();
    }
    
    function openSubtab(myUrl,myTabName) {
        url = myUrl;
        tabName = myTabName;
        sforce.console.getEnclosingPrimaryTabId(callOpenSubtab);
    }
    
    function openSubtab2(myUrl,myTabName) {
        url = myUrl;
        tabName = myTabName;
        sforce.console.getEnclosingPrimaryTabId(callOpenSubtab2);
    }
    var callOpenSubtab2=function callOpenSubtab2(result) {
        console.log(result.id);
        sforce.console.openSubtab(result.id, 
                                  url, true, tabName);
    };
    
    $(document).ready(function(){
        displayList();
        
    });
    </script>
</apex:page>